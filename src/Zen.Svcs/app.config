<?xml version="1.0" encoding="utf-8" ?>
<configuration>

  <appSettings>
    <add key="svcAssembly" value="Zen.Svcs, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null"/>    
  </appSettings>
  
  <system.serviceModel>

    <!-- Notes (services): 
       - AddDefaultEndpoints() is implicitly called for any service with no endpoints defined,
         which adds default endpoints with the default binding for all base addresses in each 
         contract found in the service host -->
    <services>
      <service name="Zen.Svcs.RemoteFacadeSvc">
        <endpoint name="" 
                  address="RemoteFacade"
                  binding="wsHttpBinding" 
                  contract="Zen.Svcs.IRemoteFacade" />
        <endpoint kind="mexEndpoint" address="mex" />
        <host>
          <baseAddresses>
            <add baseAddress= "http://localhost:1080/Zen" />
            <add baseAddress= "net.tcp://127.0.0.1:2080/Zen" />
            <add baseAddress= "net.pipe://localhost/Zen"/>
          </baseAddresses>
        </host>
      </service>
    </services>

    <!-- Notes (protocolMapping):    
       - there are default bindings for each scheme set in machine.config,
         but there is a performance hit incurred when going to machine.config 
         so we will set our default bindings here at the application level, 
         also allowing us to set up default binding configurations, if needed
         
       - For MSMQ - message queueing must be installed 
         and other specifics must be satified in the service, host, and client
         (see p.262 'Pro WCF 4') -->
    <protocolMapping>
      <clear />
      <add scheme="http"     binding="wsHttpBinding"       bindingConfiguration=""  />
      <add scheme="https"    binding="wsHttpBinding"       bindingConfiguration=""  />
      <add scheme="net.tcp"  binding="netTcpBinding"       bindingConfiguration=""  />
      <add scheme="net.pipe" binding="netNamedPipeBinding" bindingConfiguration=""  />
      <add scheme="net.msmq" binding="netMsmqBinding"      bindingConfiguration=""  />
    </protocolMapping>


    <!-- Notes (bindings):
       - a <binding> without a name becomes the default bindingConfiguration for the given type  
       
       - reliableSession
         1) Guaranteed delivery - messages will get to the destination (without any chance of failure) once and only once
         2) In-order delivery - messages will arrive in the same order they were sent
         3) Resilience - to network outages, destination unavailability, SOAP errors, etc.
         (see p.256 'Pro WCF 4')
         
       - security is another binding option to investigate...
		<bindings>
		  <wsHttpBinding>
			  <binding>
			    <reliableSession enabled="true" ordered="true"/>
			    <security mode="None" />
			  </binding>
		  </wsHttpBinding>
		  <netTcpBinding>
			  <binding>
			    <reliableSession enabled="true" ordered="true" />
			    <security mode="None" />
			  </binding>
		  </netTcpBinding>      
		</bindings>-->


    <!-- Notes (behaviors):        
       - a <behavior> without a name becomes the default behavior for all services in the application
       
       - there are a ton of options here to investigate, 
         persistanceProvider, routing, serviceCredentials, serviceThrottling, workflow ...          
         
       - we also added some custom service behavior extensions of our own (see <extensions>) -->
    <behaviors>
      <serviceBehaviors>
        <behavior>
          <serviceDebug includeExceptionDetailInFaults="true" httpHelpPageEnabled="true" />
          <serviceMetadata httpGetEnabled="true"  />
          <!---->
          <zenServiceBehaviorExtensions useIoc="true" 
                                        shellType="Zen.Svcs.Bootstrap.HostStartupShell, Zen.Svcs.Bootstrap"/>
        </behavior>
      </serviceBehaviors>
    </behaviors>


    <!-- Notes (extensions): 
       - name is used to add the extension to any <behavior>        
       - type must be fully-fully qualified (i.e. including Version, Culture, and PublicKeyToken (NO line breaks)
         (type must be BehaviorExtensionElement) -->
		<extensions>			
			<behaviorExtensions>
        <add name="zenServiceBehaviorExtensions"
             type="Zen.Svcs.ServiceModel.ZenBehaviorExtensionElement, Zen.Svcs, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" />				
			</behaviorExtensions>
		</extensions>


    <!-- IIS/WAS only? -->
    <!-- Notes (serviceHostingEnvironment):
       - we may want to allow more than one binding per scheme 
       - we may want to use fileless activation - removes the need for .svc files 
       - we may want to use a custom service host factory 
    <serviceHostingEnvironment multipleSiteBindingsEnabled="true">
      <serviceActivations>
        <clear />

        <add relativeAddress="./RemoteFacade.svc"
             service="Zen.Svcs.RemoteFacadeSvc, Zen.Svcs"
             factory="Castle.Facilities.WcfIntegration.DefaultServiceHostFactory, Castle.Facilities.WcfIntegration" />
      </serviceActivations>
    </serviceHostingEnvironment>-->


  </system.serviceModel>


  <system.web>
    <compilation debug="true" targetFramework="4.0" />
  </system.web>
  <startup><supportedRuntime version="v4.0" sku=".NETFramework,Version=v4.0"/></startup>
</configuration>